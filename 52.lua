-- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: Game Inspector (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)
-- –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ Studio –∏–ª–∏ –µ—Å–ª–∏ –≤—ã –≤–ª–∞–¥–µ–ª–µ—Ü/—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeamsService = game:GetService("Teams")
local player = Players.LocalPlayer

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∞: id –≥—Ä—É–ø–ø—ã/—Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
local ALLOWED_USER_IDS = { -- –ø—Ä–∏–º–µ—Ä: –≤–ª–∞–¥–µ–ª—å—Ü—ã/—Ç–µ—Å—Ç–µ—Ä—ã
    -- 12345678,  -- –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ UserId –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}
local ALLOWED_GROUP_ID = nil -- –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø—ã, —É–∫–∞–∂–∏—Ç–µ groupId –∏–ª–∏ nil

-- –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: –≤–ª–∞–¥–µ–ª–µ—Ü –º–µ—Å—Ç–∞ –∏–ª–∏ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
local function isDeveloper()
    -- –≤–ª–∞–¥–µ–ª–µ—Ü –º–µ—Å—Ç–∞ (CreatorId) –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ Studio/—Å–µ—Ä–≤–µ—Ä–Ω–æ–º –∫–æ–¥–µ –æ–±—ã—á–Ω–æ; –ø—Ä–æ–≤–µ—Ä–∏–º –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
    local ok, creatorId = pcall(function()
        return game.CreatorId
    end)
    if ok and creatorId and creatorId == player.UserId then
        return true
    end
    for _, id in ipairs(ALLOWED_USER_IDS) do
        if player.UserId == id then
            return true
        end
    end
    if ALLOWED_GROUP_ID then
        local ok2, isIn = pcall(function()
            return player:IsInGroup(ALLOWED_GROUP_ID)
        end)
        if ok2 and isIn then return true end
    end
    return false
end

if not isDeveloper() then
    warn("[Inspector] –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º/–≤–ª–∞–¥–µ–ª—å—Ü–∞–º.")
    return
end

print("üîç Game Inspector: –∑–∞–ø—É—Å–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞).")

-- –ü–∞—Ç—Ç–µ—Ä–Ω—ã (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ)
local stealPatterns = { "brain", "femboy", "boy", "girl", "item", "flag", "coin", "crystal", "orb", "target", "objective", "collect", "steal" }
local basePatterns = { "base", "spawn", "team", "home", "goal", "safe", "area", "zone", "slot", "point", "platform", "pedestal" }
local eventPatterns = { "steal", "collect", "touch", "grab", "take", "capture", "return", "score", "point", "win", "success" }

-- –ù–æ—Ä–º–∞–ª–∏–∑—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function lowered(name)
    if typeof(name) ~= "string" then return "" end
    return string.lower(name)
end

-- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –æ–±—ä–µ–∫—Ç–∞
local function safeFullName(obj)
    local ok, res = pcall(function() return obj:GetFullName() end)
    if ok then return res else return tostring(obj.ClassName .. " (unable to get path)") end
end

-- –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
local function scanContainer(container, patterns, resultType)
    local results = {}
    for _, obj in pairs(container:GetDescendants()) do
        local lname = lowered(obj.Name)
        for _, pat in ipairs(patterns) do
            if pat ~= "" and string.find(lname, lowered(pat)) then
                table.insert(results, {
                    type = resultType,
                    name = obj.Name,
                    path = safeFullName(obj),
                    class = obj.ClassName,
                    instance = obj
                })
                break
            end
        end
    end
    return results
end

-- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
local function findObjectsByPatterns()
    local found = {}

    print("üìÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Workspace...")
    local stealFound = scanContainer(Workspace, stealPatterns, "STEAL_OBJECT")
    for _, v in ipairs(stealFound) do table.insert(found, v); print("  üîé –¶–µ–ª—å: "..v.path.." ("..v.class..")") end

    local baseFound = scanContainer(Workspace, basePatterns, "BASE_SPAWN")
    for _, v in ipairs(baseFound) do table.insert(found, v); print("  üè† –ë–∞–∑–∞/–°–ø–∞–≤–Ω: "..v.path.." ("..v.class..")") end

    print("üìÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ReplicatedStorage...")
    local eventFound = scanContainer(ReplicatedStorage, eventPatterns, "EVENT")
    for _, v in ipairs(eventFound) do table.insert(found, v); print("  ‚ö° –ò–≤–µ–Ω—Ç: "..v.path.." ("..v.class..")") end

    return found, stealFound, baseFound, eventFound
end

-- –ò—â–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (Touch, Click, ProximityPrompt –∏ —Ç.–¥.)
local function findInteractionEvents()
    local interactions = {}
    local interactionTypes = { "TouchInterest", "ClickDetector", "ProximityPrompt", "BillboardGui", "ClickDetector" }
    for _, obj in pairs(Workspace:GetDescendants()) do
        for _, t in ipairs(interactionTypes) do
            if obj.ClassName == t then
                local parentName = safeFullName(obj.Parent or obj)
                table.insert(interactions, {type = t, parent = parentName, instance = obj})
                print("   "..t.." -> "..parentName)
                if t == "ProximityPrompt" then
                    local ok, actionText = pcall(function() return obj.ActionText end)
                    local ok2, objectText = pcall(function() return obj.ObjectText end)
                    print("     Action: "..tostring(actionText or "<n/a>").." | ObjectText: "..tostring(objectText or "<n/a>"))
                end
            end
        end
    end
    return interactions
end

-- HUD: –ø—Ä–æ—Å—Ç–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ (Client-only)
local function createHUD(stealCount, baseCount, eventCount)
    local success, screenGui = pcall(function()
        local sg = Instance.new("ScreenGui")
        sg.Name = "GameInspectorHUD"
        sg.ResetOnSpawn = false

        local frame = Instance.new("Frame", sg)
        frame.AnchorPoint = Vector2.new(0, 1)
        frame.Position = UDim2.new(0, 10, 1, -110)
        frame.Size = UDim2.new(0, 260, 0, 90)
        frame.BackgroundTransparency = 0.35
        frame.BorderSizePixel = 0
        frame.Name = "InspectorFrame"

        local title = Instance.new("TextLabel", frame)
        title.Size = UDim2.new(1, -10, 0, 24)
        title.Position = UDim2.new(0, 5, 0, 5)
        title.BackgroundTransparency = 1
        title.TextScaled = true
        title.Text = "Game Inspector (Dev)"
        title.TextXAlignment = Enum.TextXAlignment.Left

        local info = Instance.new("TextLabel", frame)
        info.Size = UDim2.new(1, -10, 0, 60)
        info.Position = UDim2.new(0,5,0,30)
        info.BackgroundTransparency = 1
        info.Text = string.format("Targets: %d\nBases: %d\nEvents: %d", stealCount, baseCount, eventCount)
        info.TextXAlignment = Enum.TextXAlignment.Left
        info.TextYAlignment = Enum.TextYAlignment.Top
        info.TextWrapped = true

        sg.Parent = player:FindFirstChildOfClass("PlayerGui") or game:GetService("StarterGui")
        return sg
    end)
    if not success then
        warn("[Inspector] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å HUD: "..tostring(screenGui))
    end
end

-- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
local function startEventMonitoring()
    Workspace.ChildAdded:Connect(function(child)
        print("[Workspace] –î–æ–±–∞–≤–ª–µ–Ω: "..tostring(child.Name))
    end)
    Workspace.ChildRemoved:Connect(function(child)
        print("[Workspace] –£–¥–∞–ª—ë–Ω: "..tostring(child.Name))
    end)
end

-- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
local allFound, stealFound, baseFound, eventFound = findObjectsByPatterns()
local interactions = findInteractionEvents()
startEventMonitoring()
createHUD(#stealFound, #baseFound, #eventFound)

print(string.rep("=", 40))
print("–ò—Ç–æ–≥–∏: –≤—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: "..#allFound)
print("  –¶–µ–ª–µ–π: "..#stealFound.." | –ë–∞–∑/—Å–ø–∞–≤–Ω–æ–≤: "..#baseFound.." | –ò–≤–µ–Ω—Ç–æ–≤: "..#eventFound)
print("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: "..#interactions)
print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏ –≤–∞—à–µ–π –∏–≥—Ä—ã.")
